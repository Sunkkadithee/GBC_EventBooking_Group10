#---------------------------------------------------------------------------------------------------------------------------
# 1. docker-compose -p microservices-assigment -f docker-compose.yml up -d
#     - This command will start the containers in detached mode (-d) without rebuilding the image (if they exist)
#
# 2. docker-compose -p mongodb-booking -f docker-compose-booking.yml up -d --build
#       - this command fores the rebuild of image, even if they already exist, before starting them.
#
#-----------------------------------------------------------------------------------------------------------------------

version: '3.9'

services:

  booking-service:
    image: booking-service
    ports:
      - "8088:8084"
    build:
      context: ./booking-service        #The directory where the Dockerfile resides
      dockerfile: ./Dockerfile          #Specify the Dockerfile for use to build image
    container_name: booking-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      - mongodb
    networks:
      - spring


  # room-service:
  #     image: room-service

  #     ports:
  #       - "8086:8086"
  #     build:
  #       context: ./room-service       # The directory where the Dockerfile resides
  #       dockerfile: ./Dockerfile    # Specify the Dockerfile for use to build image
  #     container_name: room-service
  #     environment:
  #       SPRING_PROFILES_ACTIVE: docker
  #     depends_on:
  #       - postgres
  #     networks:
  #       - spring

  # event-service:
  #   image: event-service
  #   ports:
  #     - "8089:8084"
  #   build:
  #     context: ./event-service
  #     dockerfile: ./Dockerfile
  #   container_name: event-service
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - spring

  # approval-service:
  #   image: approval-service

  #   ports:
  #     - "8085:8086"
  #   build:
  #     context: ./approval-service       # The directory where the Dockerfile resides
  #     dockerfile: ./Dockerfile    # Specify the Dockerfile for use to build image
  #   container_name: approval-service
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #   depends_on:
  #     - postgres
  #   networks:
  #     - spring


  postgres:
    image: postgres
    container_name: postgres-room
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=password
    volumes:
      - ./data/room:/var/lib/postgresql/data
      - ./init/room/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - spring

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin-room
  #   ports:
  #     - "8887:80"
  #   environment:
  #     - PGADMIN_DEFAULT_EMAIL=user@domain.ca
  #     - PGADMIN_DEFAULT_PASSWORD=password
  #   networks:
  #     - spring

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/bookings:/data/db  # the database will oersist data here on the host machine
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro # Initialize MongoDB with data from this script.
    container_name: mongodb_booking
    #restart: unless-stopped
    #command: mongod --auth
    networks:
      - spring

  # mongo-express:
  #   image: mongo-express
  #   ports:
  #     - "8083:8081"
  #   environment:
  #     - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
  #     - ME_CONFIG_MONGODB_ADMINPASSWORD=password
  #     - ME_CONFIG_MONGODB_SERVER=mongodb
  #   container_name: mongo-express_booking
  #   depends_on:
  #     - mongodb
  #   networks:
  #     - spring


#optional volumes section persisting data
volumes:
  mongo-db:
    driver: local

networks:
  spring:
    driver: bridge




